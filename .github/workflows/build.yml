name: Xcode - Fast Build

on: 
  push:
  pull_request:
  workflow_dispatch:
    inputs: 
      release__nightly:
        description: Create a nightly release
        type: boolean
        required: false

jobs:
  build:
    name: Fast Build using optimized xcodebuild
    runs-on: macos-latest
    env:
      scheme: LiveContainer
      archive_path: archive
    outputs:
      scheme: ${{ steps.scheme.outputs.scheme }}
      archive_path: ${{ env.archive_path }}
      artifact: ${{ env.scheme }}.ipa
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
          
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # ✅ Speed Optimization 1: Install build tools
      - name: Install Build Optimization Tools
        run: |
          brew install ninja ccache gnu-time
          echo "$(brew --prefix)/bin" >> $GITHUB_PATH
          echo "$(brew --prefix)/opt/gnu-time/libexec/gnubin" >> $GITHUB_PATH

      # ✅ Speed Optimization 2: Setup ccache
      - name: Setup ccache
        run: |
          ccache --set-config=cache_dir=${{ runner.temp }}/ccache
          ccache --set-config=compression=true
          ccache --set-config=max_size=2G
          ccache --set-config=sloppiness=pch_defines,time_macros
          ccache -z

      # ✅ Speed Optimization 3: Cache builds
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('**/*.m', '**/*.mm', '**/*.c', '**/*.cpp', '**/*.h') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      # ✅ Speed Optimization 4: Cache derived data
      - name: Cache Xcode Derived Data
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: deriveddata-${{ runner.os }}-${{ hashFiles('**/*.pbxproj') }}
          restore-keys: |
            deriveddata-${{ runner.os }}-

      - name: Set Scheme
        id: scheme
        run: |
          if [ $scheme = default ]
          then
            scheme_list=$(xcodebuild -list -json | tr -d "\n")
            scheme=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
            echo Using default scheme: $scheme
          else
            echo Using configured scheme: $scheme
          fi
          echo "scheme=$scheme" >> $GITHUB_OUTPUT

      - name: Set filetype_parameter
        id: filetype_parameter
        run: |
          filetype_parameter=`ls -A | grep -i \\.xcworkspace\$ && echo workspace || echo project`
          echo "filetype_parameter=$filetype_parameter" >> $GITHUB_OUTPUT

      - name: Set file_to_build
        id: file_to_build
        run: |
          file_to_build=`ls -A | grep -i \\.xcworkspace\$ || ls -A | grep -i \\.xcodeproj\$`
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "file_to_build=$file_to_build" >> $GITHUB_OUTPUT

      # ✅ Speed Optimization 5: Fast Archive with all optimizations
      - name: Fast Archive
        env:
          scheme: ${{ steps.scheme.outputs.scheme }}
          filetype_parameter: ${{ steps.filetype_parameter.outputs.filetype_parameter }}
          file_to_build: ${{ steps.file_to_build.outputs.file_to_build }}
          CC: ccache clang
          CXX: ccache clang++
        run: |
          # Get CPU count for parallel builds
          CPU_COUNT=$(sysctl -n hw.ncpu)
          echo "Building with $CPU_COUNT parallel jobs"
          
          # Optimized xcodebuild command
          time xcodebuild archive \
            -archivePath "$archive_path" \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -sdk iphoneos -arch arm64 \
            -configuration Release \
            -jobs $CPU_COUNT \
            -parallelizeTargets \
            -hideShellScriptEnvironment \
            -showBuildTimingSummary \
            -allowProvisioningUpdates \
            | xcpretty && exit ${PIPESTATUS[0]}
          
          # Show ccache stats
          echo "=== ccache statistics ==="
          ccache -s

      # Rest of your workflow unchanged...
      - name: Tar Build Artifact
        run: tar -cvf "$archive_path.xcarchive.tar" "$archive_path.xcarchive"
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.archive_path }}.xcarchive.tar
          path: ${{ env.archive_path }}.xcarchive.tar
          
      - name: Create IPA
        run: |
          mv "$archive_path.xcarchive/Products/Applications" Payload
          zip -r "$scheme.ipa" "Payload" -x "._*" -x ".DS_Store" -x "__MACOSX"
          
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.scheme }}.ipa
          path: ${{ env.scheme }}.ipa

  release__nightly:
    name: Nightly Release
    permissions:
      contents: write
    if: inputs.release__nightly || github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    runs-on: ubuntu-latest
    needs: [build]
    concurrency:
      group: release__nightly
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact }}
      - name: Update AltStore source
        id: update_source
        run: |
          NIGHTLY_LINK="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}" python update_json.py
      - name: Nightly Release
        uses: andelf/nightly-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          body: |
            **Latest Commit:** ${{ github.event.head_commit.message }}
            
            This is a nightly release [created automatically with GitHub Actions workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}).
          files: |
            ${{ needs.build.outputs.artifact }}
            apps_nightly.json
